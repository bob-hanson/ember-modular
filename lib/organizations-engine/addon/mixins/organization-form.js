import Mixin from '@ember/object/mixin';
import { notEmpty, not, and } from '@ember/object/computed';

export default Mixin.create({
  name: null,
  city: null,
  address: null,
  address2: null,
  zip: null,
  state: null,
  isAccountEnabled: true,
  mainContactName: null,
  mainContactEmail: null,
  mainContactPhone: null,
  billingContactName: null,
  billingContactEmail: null,
  billingContactPhone: null,
  techincalContactName: null,
  techincalContactEmail: null,
  techincalContactPhone: null,
  healthicitySalesName: null,
  healthicitySalesEmail: null,
  healthicitySalesPhone: null,
  healthicityAccountManagerName: null,
  healthicityAccountManagerEmail: null,
  healthicityAccountManagerPhone: null,
  selectedProducts: null,

  formProperties: null,

  touchables: [
    'nameIsTouched',
    'cityIsTouched',
    'addressMainIsTouched',
    'stateIsTouched',
    'zipIsTouched',
    'mainContactNameIsTouched',
    'mainContactEmailIsTouched',
    'mainContactNameIsTouched',
    'healthicitySalesNameIsTouched',
    'healthicityAccountManagerNameIsTouched',
    'productGroupHasBeenTouched'
  ],

  hasName: notEmpty('name'),
  blankName: not('hasName'),
  hasCity: notEmpty('city'),
  blankCity: not('hasCity'),
  hasAddressMain: notEmpty('address'),
  blankAddressMain: not('hasAddressMain'),
  hasState: notEmpty('state'),
  blankState: not('hasState'),
  hasZip: notEmpty('zip'),
  blankZip: not('hasZip'),
  hasMainContactName: notEmpty('mainContactName'),
  blankMainContactName: not('hasMainContactName'),
  hasMainContactEmail: notEmpty('mainContactEmail'),
  blankMainContactEmail: not('hasMainContactEmail'),
  hasHealthicitySalesName: notEmpty('healthicitySalesName'),
  blankHealthicitySalesName: not('hasHealthicitySalesName'),
  hasHealthicityAccountManagerName: notEmpty('healthicityAccountManagerName'),
  blankHealthicityAccountManagerName: not('hasHealthicityAccountManagerName'),

  nameIsInvalid: and('blankName', 'nameIsTouched'),
  nameIsValid: not('nameIsInvalid'),
  cityIsInvalid: and('blankCity', 'cityIsTouched'),
  cityIsValid: not('cityIsInvalid'),
  addressMainIsInvalid: and('blankAddressMain', 'addressMainIsTouched'),
  addressMainIsValid: not('addressMainIsInvalid'),
  stateIsInvalid: and('blankState', 'stateIsTouched'),
  stateIsValid: not('stateIsInvalid'),
  zipIsInvalid: and('blankZip', 'zipIsTouched'),
  zipIsValid: not('zipIsInvalid'),
  mainContactNameIsInvalid: and('blankMainContactName', 'mainContactNameIsTouched'),
  mainContactNameIsValid: not('mainContactNameIsInvalid'),
  mainContactEmailIsInvalid: and('blankMainContactEmail', 'mainContactEmailIsTouched'),
  mainContactEmailIsValid: not('mainContactEmailIsInvalid'),
  healthicitySalesNameIsInvalid: and('blankHealthicitySalesName', 'healthicitySalesNameIsTouched'),
  healthicitySalesNameIsValid: not('healthicitySalesNameIsInvalid'),
  healthicityAccountManagerNameIsInvalid: and('blankHealthicityAccountManagerName', 'healthicityAccountManagerNameIsTouched'),
  healthicityAccountManagerNameIsValid: not('healthicityAccountManagerNameIsInvalid'),

  hasProductSelected: notEmpty('selectedProducts'),
  productsAreEmpty: not('hasProductSelected'),
  productIsInvalid: and('productsAreEmpty', 'productGroupHasBeenTouched'),
  productIsValid: not('productIsInvalid'),

  allRequiredFieldsAreMet: and(
    'hasName',
    'hasCity',
    'hasAddressMain',
    'hasState',
    'hasZip',
    'hasMainContactName',
    'hasMainContactEmail',
    'hasHealthicitySalesName',
    'hasHealthicityAccountManagerName',
    'hasProductSelected')

});
